"use client";

import { useRef, useState } from "react";
import classes from "./image-picker.module.css";
import Image from "next/image";

//Now to show a preview of the picked image we need to handle the event that the image was picked and then store some state so that we can update this UI and show a preview as soon as we have a image

export default function ImagePicker({ label, name }) {
  const [pickedImage, setPickedImage] = useState();
  const imageInput = useRef();

  function handlePickClick() {
    imageInput.current.click();
  }

  function handleImageChange(event) {
    const file = event.target.files[0];

    if (!file) {
      //to make sure that the preview is reset
      setPickedImage(null);
      return;
    }

    //if we make it past this if check, we know that some file has been selected. Now in order to show it as a preview here, we now want to convert it into a so-called data URL, which is simply a value that can be used as an input for an image element, so that can be used as a source for an image element.

    //And we can generate such a data URL with help of a class built into Javascript, the FileReader class.

    const fileReader = new FileReader();

    fileReader.onload = () => {
      setPickedImage(fileReader.result);
    };

    fileReader.readAsDataURL(file);
    //Now this method works in a bit of a strange way because it doesn't return anything
    //Instead, we get hold of that data URL that's being generated by assigning a value to the onload property of this fileReader object. So we store a function as a value in onload and this function will then be triggered by the file reader once readAsDataURL() method is done.

    //But we then won't get the generated URL as an input instead, we can access it by accessing fileReader.result and that will then be that generated URL.
  }

  return (
    <div className={classes.picker}>
      <label htmlFor={name}>{label}</label>
      <div className={classes.controls}>
        <div className={classes.preview}>
          {!pickedImage && <p>No image picked yet.</p>}
          {pickedImage && (
            <Image
              src={pickedImage}
              alt="The image selected by the user."
              fill
            />
          )}
        </div>
        <input
          className={classes.input}
          type="file"
          id={name}
          accept="image/png, image/jpeg"
          name={name}
          ref={imageInput}
          onChange={handleImageChange}
          required
        />
        <button
          className={classes.button}
          type="button"
          onClick={handlePickClick}
        >
          Pick an Image
        </button>
      </div>
    </div>
  );
}
